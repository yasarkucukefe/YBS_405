par(mar=orig.mar) # Restore the original margins
invisible(r) # Return the persp object invisibly
}
surface(x^3 + y^3, from.x=-3, to.x=3, from.y=-3, to.y=3)
n = 50
plot(0, 0, type="n", xlim=c(1,n), ylim=c(1,6))
points(1:n, rep(6,n), col=gray.colors(n), pch=19)
points(1:n, rep(5,n), col=rainbow(n), pch=19)
points(1:n, rep(4,n), col=heat.colors(n), pch=19)
points(1:n, rep(3,n), col=terrain.colors(n), pch=19)
points(1:n, rep(2,n), col=topo.colors(n), pch=19)
points(1:n, rep(1,n), col=cm.colors(n), pch=19)
# ggplot
library(dslabs)
data(murders)
force(murders)
library(ggplot2)
ggplot(data = murders)
install.packages("dslabs")
murders %>% ggplot()  # ggplot(data = murders)
library(tidyverse)
murders %>% ggplot()  # ggplot(data = murders)
murder %>% ggplot() %>% geom_point(aes(population/10^6, total))
murders %>% ggplot() %>% geom_point(aes(population/10^6, total))
ggplot(data = murders) + geom_point(aes(population/10^6, total))
ggplot(data = murders) + geom_point(aes(x=population/10^6, y=total))
ggplot(data = murders)
+ geom_point(aes(x=population/10^6, y=total))
+ geom_text(aes(x=population/10^6, y=total, label = abb))
#
ggplot(data = murders) + geom_point(aes(x=population/10^6, y=total)) + geom_text(aes(x=population/10^6, y=total, label = abb))
#
ggplot(data = murders) + geom_point(aes(x=population/10^6, y=total)) + geom_text(aes(x=population/10^6, y=total, label = abb))
ggplot(data = murders)
+ geom_point(aes(x=population/10^6, y=total))
+ geom_text(aes(x=population/10^6, y=total, label = abb))
#
ggplot(data = murders) + geom_point(aes(x=population/10^6, y=total)) + geom_text(aes(x=population/10^6, y=total, label = abb))
ggplot(data = murders) +
geom_point(aes(x=population/10^6, y=total)) +
geom_text(aes(x=population/10^6, y=total, label = abb))
#
ggplot(data = murders) +
geom_point(aes(x=population/10^6, y=total)) +
geom_text(aes(x=population/10^6, y=total, label = abb)) +
geom_text(aes(x=10,y=100,label="Eyaletlere göre cinayet sayıları"))
ggplot(data = murders) +
geom_point(aes(x=population/10^6, y=total)) +
geom_text(aes(x=population/10^6, y=total, label = abb)) +
geom_text(aes(x=10,y=1000,label="Eyaletlere göre cinayet sayıları"))
colnames(murders)
ggplot(data = murders) +
geom_point(aes(x=population/10^6, y=total)) +
geom_text(aes(x=population/10^6, y=total, label = abb)) +
geom_point(aes(col=region), size=3)
ggplot(data = murders) +
geom_point(aes(x=population/10^6, y=total)) +
geom_text(aes(x=population/10^6, y=total, label = abb)) +
geom_point(aes(x=population/10^6, y=total, col=region), size=3)
library(ggExtra)
install.packages("ggExtra")
#
library(ggExtra)
head(mtcars)
data("mtcars")
head(mtcars)
ggplot(data=mtcars, aes(x=wt, y=mgp, color=cyl, size=cyl)) +
geop_point()
ggplot(data=mtcars, aes(x=wt, y=mgp, color=cyl, size=cyl)) +
geom_point()
ggplot(data=mtcars, aes(x=wt, y=mpg, color=cyl, size=cyl)) +
geom_point()
ggplot(data=mtcars, aes(x=wt, y=mpg, color=cyl, size=cyl)) +
geom_point()+
theme(legend.position="none")
p = ggplot(data=mtcars, aes(x=wt, y=mpg, color=cyl, size=cyl)) +
geom_point()+
theme(legend.position="none")
p = ggplot(data=mtcars, aes(x=wt, y=mpg, color=cyl, size=cyl)) +
geom_point()+
theme(legend.position="none")
ggMarginal(p, type="histogram")
ggMarginal(p, type="density")
# Veri Analizi - Tidyverse
df = read.csv("https://raw.githubusercontent.com/benjaminleroy/36-350-summer-data/master/Week6/strikes.csv")
# Veri Analizi - Tidyverse
df = read.csv("https://raw.githubusercontent.com/benjaminleroy/36-350-summer-data/master/Week6/strikes.csv")
head(df)
dim(df)
typeof(df)
#
df_italy = df %>% filter(country == "Italy") # İtalya verisi için filtre
dim(df_italy)
head(df_italy)
# gruplara ayırmak için
df_ulke = df %>% group_by(country) %>% nest()
typeof(df_ulke)
class(df_ulke)
head(df_ulke)
df_ulke$data[df_ulke$country == "Italy"]
grev_issizlik_lm = function(data){
formul = as.formula("strike.volume ~ unemployement , ")
coef_tablo = broom::tidy(summary(lm(formul, data=data)))
return (coef_tablo %>% select(term, estimate))
}
grev_issizlik_lm(df_italy)
grev_issizlik_lm = function(data){
formul = as.formula("strike.volume ~ unemployement")
coef_tablo = broom::tidy(summary(lm(formul, data=data)))
return (coef_tablo %>% select(term, estimate))
}
grev_issizlik_lm(df_italy)
colnames(df_italy)
grev_issizlik_lm = function(data){
formul = as.formula("strike.volume ~ unemployment")
coef_tablo = broom::tidy(summary(lm(formul, data=data)))
return (coef_tablo %>% select(term, estimate))
}
grev_issizlik_lm(df_italy)
lm("strike.volume ~ unemployment", data=df_italy)
broom::tidy(lm("strike.volume ~ unemployment", data=df_italy))
grev_issizlik_lm = function(data){
formul = as.formula("strike.volume ~ unemployment")
coef_tablo = broom::tidy(lm(formul, data=data))
return (coef_tablo %>% select(term, estimate))
}
grev_issizlik_lm(df_italy)
grev_issizlik_lm(df_italy)
grev_issizlik_lm(df_italy)[unemployement,]
grev_issizlik_lm(df_italy)[unemployment,]
grev_issizlik_lm(df_italy)
model = grev_issizlik_lm(df_italy)
model
model[2,2]
grev_issizlik_lm = function(data){
formul = as.formula("strike.volume ~ unemployment")
coef_tablo = broom::tidy(lm(formul, data=data))
return (coef_tablo %>% select(term, estimate)[2,2])
}
model = grev_issizlik_lm(df_italy)
grev_issizlik_lm = function(data){
formul = as.formula("strike.volume ~ unemployment")
coef_tablo = broom::tidy(lm(formul, data=data))
return (coef_tablo %>% select(term, estimate))
}
model = grev_issizlik_lm(df_italy)
model %>% slice(1)
model %>% slice(2)
model %>% slice(2) %>% select(estimate)
# Nest
df %>% group_by(country) %>% nest() %>% mutate(katsayi = map(data, grev_issizlik_lm))
df %>% group_by(country) %>%
nest() %>%
mutate(lmodel = map(data, grev_issizlik_lm)) %>%
mutate(katsayi = lmodel %>% slice(2) %>% select(estimate))
model
model[2,]
model[2,]$estimate
df %>% group_by(country) %>%
nest() %>%
mutate(lmodel = map(data, grev_issizlik_lm)) %>%
mutate(katsayi = lmodel[2,]$estimate)
df %>% group_by(country) %>%
nest() %>%
mutate(lmodel = map(data, grev_issizlik_lm))
returnEstimate = function(lmodel){
return (lmodel[,2]$estimate)
}
returnEstimate(model)
returnEstimate = function(lmodel){
return (lmodel[2,]$estimate)
}
returnEstimate = function(lmodel){
return (lmodel[2,]$estimate)
}
returnEstimate(model)
df %>% group_by(country) %>%
nest() %>%
mutate(lmodel = map(data, grev_issizlik_lm)) %>%
mutate(katsayi = map(lmodel, returnEstimate))
returnEstimate = function(lmodel){
return (lmodel[2,]$estimate)[1]
}
returnEstimate(model)
returnEstimate = function(lmodel){
return (lmodel[2,]$estimate)[1]
}
returnEstimate(model)
df %>% group_by(country) %>%
nest() %>%
mutate(lmodel = map(data, grev_issizlik_lm)) %>%
mutate(katsayi = map(lmodel, returnEstimate))
df %>% group_by(country) %>%
nest() %>%
mutate(lmodel = map(data, grev_issizlik_lm)) %>%
mutate(katsayi = map(lmodel, returnEstimate)) %>%
unnest()
df %>% group_by(country) %>%
nest() %>%
mutate(lmodel = map(data, grev_issizlik_lm)) %>%
mutate(katsayi = map(lmodel, returnEstimate)) %>%
unnest()
df %>% group_by(country) %>%
nest() %>%
mutate(lmodel = map(data, grev_issizlik_lm)) %>%
unnest()
df %>% group_by(country) %>%
nest() %>%
mutate(lmodel = map(data, grev_issizlik_lm)) %>%
select(country, lmodel) %>%
unnest()
df %>% group_by(country) %>%
nest() %>%
mutate(lmodel = map(data, grev_issizlik_lm)) %>%
mutate(katsayi = map(lmodel, returnEstimate) ) %>%
select(country, lmodel) %>%
unnest()
df %>% group_by(country) %>%
nest() %>%
mutate(lmodel = map(data, grev_issizlik_lm)) %>%
select(country, lmodel) %>%
unnest()
df %>% group_by(country) %>%
nest() %>%
mutate(lmodel = map(data, grev_issizlik_lm)) %>%
select(country, lmodel) %>%
unnest() %>%
filter(term == unemployment) %>%
select(country, estimate)
df %>% group_by(country) %>%
nest() %>%
mutate(lmodel = map(data, grev_issizlik_lm)) %>%
select(country, lmodel) %>%
unnest()
df %>% group_by(country) %>%
nest() %>%
mutate(lmodel = map(data, grev_issizlik_lm)) %>%
select(country, lmodel) %>%
unnest() %>%
filter(term == "unemployment") %>%
select(country, estimate)
df %>% group_by(country) %>%
nest() %>%
mutate(lmodel = map(data, grev_issizlik_lm)) %>%
select(country, lmodel) %>%
unnest() %>%
filter(term == "unemployment") %>%
select(country, estimate) %>%
ggplot(aes(x=country,y=estimate)) %>% geom_point()
df %>% group_by(country) %>%
nest() %>%
mutate(lmodel = map(data, grev_issizlik_lm)) %>%
select(country, lmodel) %>%
unnest() %>%
filter(term == "unemployment") %>%
select(country, estimate) %>%
ggplot(aes(x=country,y=estimate)) %>% geom_point()
df %>% group_by(country) %>%
nest() %>%
mutate(lmodel = map(data, grev_issizlik_lm)) %>%
select(country, lmodel) %>%
unnest() %>%
filter(term == "unemployment") %>%
select(country, estimate) %>%
ggplot() %>% geom_point(aes(x=country,y=estimate))
df %>% group_by(country) %>%
nest() %>%
mutate(lmodel = map(data, grev_issizlik_lm)) %>%
select(country, lmodel) %>%
unnest() %>%
filter(term == "unemployment") %>%
select(country, estimate)
df %>% group_by(country) %>%
nest() %>%
mutate(lmodel = map(data, grev_issizlik_lm)) %>%
select(country, lmodel) %>%
unnest() %>%
ungroup() %>%
filter(term == "unemployment") %>%
select(country, estimate)
mtcars
subset(mtcars, mtcars$mpg == max(mtcars$mpg))
mtcars_sirali = mtcars[order(mtcars$mpg, decreasing = TRUE),]
mtcars_sirali
mtcars_sirali[1,]
mtcars["Ferrari Dino","hp"]
mtcars$wt
median(mtcars$wt)
order(mtcars$wt)
morley
head(morley)
median(morley$Speed)+299000
morley$gercek = morley$Speed + 299000
head(morley)
treated = subset(Puromycin, Puromycin$state == "treated")
length(treated)/length(untreated)
untreated = subset(Puromycin, Puromycin$state == "untreated")
length(treated)/length(untreated)
treated = subset(Puromycin, Puromycin$state == "treated")$state
untreated = subset(Puromycin, Puromycin$state == "untreated")$state
length(treated)/length(untreated)
ortalamadan_buyuk = iris[mean(iris$Petal.Length) < iris$Petal.Length]
mean(iris$Petal.Length) < iris$Petal.Length
ortalamadan_buyuk = iris[mean(iris$Petal.Length) < iris$Petal.Length,]
ortalamadan_buyuk
virginica  <- mean(subset(iris, iris$Species == "virginica")$Petal.Length)
setosa     <- mean(subset(iris, iris$Species == "setosa")$Petal.Length)
versicolor <- mean(subset(iris, iris$Species == "versicolor")$Petal.Length)
max.mean <- max(virginica, setosa, versicolor)
if (virginica == max.mean) { print("virginica") }
if (setosa == max.mean) { print("setosa") }
if (versicolor == max.mean) { print("versicolor") }
apply(X=iris[,1:4], MARGIN = 2, FUN=mean)
library(tidyverse)
library tidyverse
import(tidyverse)
require(tidyverse)
typeof(2)
x = 1
y = ifelse(x>0, 2*x,-x+1)
print(y)
print("yes")
x = c(3,1,2,4,5)
if(x[1]==1){
print(x[2])
}else{
print(x[3])
}
x[1]
liste = list(meyve="elma",rakam=2)
liste
liste[[1]]
liste$meyve
liste = list(meyve="elma",rakam=2, arabalar = list("Ford","Tesla"))
liste$arabalar[[1]]
x.vek = [1,2,3,4,5]
print(x.vec[c(F,F,T,F,T)])
x.vek = [1,2,3,4,5]
print(x.vek[c(F,F,T,F,T)])
x.vek = [1,2,3,4,5]
x.vek = c(1,2,3,4,5)
print(x.vek[c(F,F,T,F,T)])
isim = ""
for (str in c("İstanbul", "Ankara", "İzmir")) {
isim = paste(isim, str, ",")
}
print(isim)
sehirler = ""
for (str in c("İstanbul", "Ankara", "İzmir")) {
sehirler = paste(sehirler, str, ",")
}
print(sehirler)
sehirler = ","
for (str in c("İstanbul", "Ankara", "İzmir")) {
sehirler = paste(sehirler, str, ",")
}
print(sehirler)
rakam = 1
repeat(
if(rakam > 3){
break
}
rakam = rakam + 1
)
print(rakam)
rakam = 1
repeat(
if(rakam > 3){
break
}
rakam = rakam + 1
)
repeat(
if(rakam > 3){
break
}
rakam = rakam + 1
)
if(rakam > 3){
break
}
rakam = 1
repeat{
if(rakam > 3){
break
}
rakam = rakam + 1
}
print(rakam)
c(8,7,2,4,5) %>% min() %>% max() %>% mean()
topla = function(x, y) {
return x + y
}
2 %>% topla(3) %>% topla(1) %>% topla(4)
topla = function(x, y) {
return x + y
}
topla = function(x, y) {
x + y
}
2 %>% topla(3) %>% topla(1) %>% topla(4)
mtcars
head(mtcars)
data(mtcars)
head(mtcars)
typeof(mtcars)
mtcoars %>% select(hp) %>% mean()
mtcars %>% select(hp) %>% mean()
mtcars %>% select(hp)
mtcars %>% select(hp) %>% max()
mtcars %>% select(hp) %>% mean()
mtcars %>% max() %>% select(hp)
mtcars %>% max("hp")
htcars %>% arrange(desc(hp))
mtcars %>% arrange(desc(hp))
mtcars %>% distinct(cyl)
mtcars %>% distinct(cyl)[,"cyl"]
mtcars %>% distinct(cyl) %>% [,"cyl"]
mtcars %>% distinct(cyl) %>% select(cyl)
mtcars %>% distinct(cyl) %>% as.list()
plot(mtcars$hp,mtcars$mpg,type="o")
plot(mtcars$hp,mtcars$mpg,pch = 19)
plot(mtcars$hp,mtcars$mpg)
plot(mtcars$hp,mtcars$mpg, type="l")
plot(hp,mpg, type="p")
#Data filenames and path
data_file="C:/Users/yasar/Dropbox/Bige/isgucu/HHIA_2020/HHIA_2020/mikro_veri_2020"
veri = read.csv(file=data_file)
#Data filenames and path
data_file="C:/Users/yasar/Dropbox/Bige/isgucu/HHIA_2020/HHIA_2020/mikro_veri_2020.csv"
veri = read.csv(file=data_file)
#Data filenames and path
data_file="C:/Users/yasar/Dropbox/Bige/isgucu/data/HHIA_2020/HHIA_2020/mikro_veri_2020.csv"
veri = read.csv(file=data_file)
veri = read.csv(file=data_file)
#Data filenames and path
data_file="C:/Users/yasar/Dropbox/Bige/isgucu/data/HHIA_2020/HHIA_2020/mikro_veri_2020.csv"
veri = read.csv(file=data_file)
library(dplyr)
library(ggplot2)
View(veri)
veri = read.csv(file=data_file,sep = ";")
type(veri)
typeof(veri)
as_tibble(veri)
data = as_tibble(veri)
colnames(data)
data %>% distinct('REFERANS_YIL')
data %>% distinct(REFERANS_YIL)
DATA %>% distinct(OZEL_KAMU)
data %>% distinct(OZEL_KAMU)
data = read.csv("ClusterData.csv", header = T)
View(data)
colnames(data)
# Sadece sayısal değer içeren kolonları seç
st = data[, 3:27]
View(st)
row.names(st) = data[,2]
colnames(st)
# Mesafe matrisi
d = dist(st)
# Hiyerarşik kümeleme
c = hclust(d)
# Plot dendrogram
plot(c, main="Cluster with all searches")
# Farklı bir plot yöntemi
hcd <- as.dendrogram(c)
# Default plot
plot(hcd, type = "rectangle", ylab = "Height")
## Gerekli olan pakenleri yükle
pacman::p_load("class")
install.packages(pacman)
install.packages("pacman")
## Gerekli olan pakenleri yükle
# install.packages(pacman)
pacman::p_load("class")
# Verileri oku
df = read.csv("ccdefault.csv", header = T)
# Verileri oku
df = read.csv("ccdefault.csv", header = T)
normalize = function(x) {
norm = ((x - min(x)) / (max(x) - min(x)))
return norm
}
normalize = function(x) {
norm = ((x - min(x)) / (max(x) - min(x)))
return (norm)
}
View(df)
df[, -1]
dfn = as.data.frame(lapply(df[, -1], normalize))
head(dfn)
dfn = as.data.frame(lapply(df[, c(-1,-25)], normalize))
View(dfn)
# dfn = as.data.frame(lapply(df[, 2:24], normalize))
dfn = cbind(dfn, df[, 25])
View(dfn)
names(dfn)[24] = "DEFAULT"
# Eğitim ve Test verilerini ayrılması
dfn.split = sample(2, nrow(dfn), replace = TRUE, prob= c(0.7, 0.3))
dfn.train = dfn[dfn.split == 1, 1:23]
dfn.test = dfn[dfn.split == 2, 1:23]
dfn.train.labels = dfn[dfn.split == 1, 24]
dfn.test.labels = dfn[dfn.split == 2, 24]
View(dfn.train)
## Sınıflandırıcı modeli
dfn.pred = knn(train = dfn.train, test = dfn.test, cl = dfn.train.labels, k=5)
table(dfn.pred, dfn.test.labels)
559/(6427+559)
## Sınıflandırıcı modeli
dfn.pred = knn(train = dfn.train, test = dfn.test, cl = dfn.train.labels, k=9)
table(dfn.pred, dfn.test.labels)
